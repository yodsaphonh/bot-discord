import os
import asyncio
import discord
import wavelink
from discord.ext import commands
from dotenv import load_dotenv

# ---------- ENV / CONFIG ----------
load_dotenv()
TOKEN   = os.getenv("DISCORD_TOKEN")
PREFIX  = os.getenv("COMMAND_PREFIX", "!")
LL_HOST = os.getenv("LAVALINK_HOST", "127.0.0.1")
LL_PORT = int(os.getenv("LAVALINK_PORT", "2333"))
LL_PWD  = os.getenv("LAVALINK_PASSWORD", "changeme")
DEFAULT_VOLUME = int(os.getenv("DEFAULT_VOLUME", "50"))

intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
bot = commands.Bot(command_prefix=PREFIX, intents=intents, help_command=None)

# ---------- Compatibility: NodePool(‡πÄ‡∏Å‡πà‡∏≤) / Pool(‡πÉ‡∏´‡∏°‡πà) ----------
HAS_NODEPOOL = hasattr(wavelink, "NodePool")  # ‡πÉ‡∏ô 3.3.0 ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô False

def pool_nodes():
    """‡∏Ñ‡∏∑‡∏ô dict ‡∏Ç‡∏≠‡∏á nodes ‡∏ï‡∏≤‡∏° API ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô"""
    return wavelink.NodePool.nodes if HAS_NODEPOOL else getattr(wavelink.Pool, "nodes", {})

async def pool_connect():
    """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ node ‡∏ï‡∏≤‡∏° API ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô"""
    node = wavelink.Node(uri=f"http://{LL_HOST}:{LL_PORT}", password=LL_PWD)
    if HAS_NODEPOOL:
        await wavelink.NodePool.connect(client=bot, nodes=[node])
    else:
        await wavelink.Pool.connect(client=bot, nodes=[node])

# ---------- Startup ----------
@bot.event
async def on_ready():
    print(f"‚úÖ Logged in as {bot.user} ({bot.user.id})")
    # retry ‡∏ï‡πà‡∏≠ node ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 6 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (backoff)
    for i in range(6):
        try:
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ node ‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î retry
            for n in pool_nodes().values():
                if getattr(n, "is_connected", False):
                    raise SystemExit
            await pool_connect()
            break
        except SystemExit:
            break
        except Exception as e:
            print(f"[Wavelink] connect attempt {i+1} failed: {e}")
            await asyncio.sleep(2 * (i + 1))

# NOTE: ‡πÉ‡∏ô Wavelink 3.3.0 ‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á 'payload' ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà node ‡∏ï‡∏£‡∏á ‡πÜ
@bot.listen("on_wavelink_node_ready")
async def _node_ready(payload: wavelink.NodeReadyEventPayload):
    node = payload.node
    print(f"üéß Lavalink node ready: {node.uri}")

# ---------- Helpers ----------
async def ensure_connected(ctx) -> wavelink.Player:
    """‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ç‡πâ‡∏≤ voice ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÅ‡∏•‡∏∞‡∏ä‡∏±‡∏ß‡∏£‡πå‡∏ß‡πà‡∏≤‡∏°‡∏µ node ‡πÅ‡∏•‡πâ‡∏ß"""
    if not ctx.author.voice or not ctx.author.voice.channel:
        raise commands.CommandError("‚ö†Ô∏è ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞")

    if not pool_nodes():  # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≠ node
        await pool_connect()

    if ctx.voice_client and isinstance(ctx.voice_client, wavelink.Player):
        return ctx.voice_client

    player: wavelink.Player = await ctx.author.voice.channel.connect(cls=wavelink.Player)
    player.text_channel = ctx.channel  # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏≠‡πÇ‡∏ï‡πâ
    await player.set_volume(DEFAULT_VOLUME)
    return player

# ---------- Debug ----------
@bot.command()
async def nodes(ctx):
    ns = pool_nodes()
    if not ns:
        return await ctx.reply("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ node ‡πÉ‡∏ô‡∏û‡∏π‡∏•")
    lines = []
    for key, n in ns.items():
        stats = getattr(n, "stats", None)
        lines.append(
            f"- {key}: connected={getattr(n,'is_connected',None)} uri={n.uri} players={getattr(stats,'players',None)}"
        )
    await ctx.reply("\n".join(lines))

# ---------- Music Commands ----------
@bot.command()
async def join(ctx):
    await ensure_connected(ctx)
    await ctx.reply("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß", mention_author=False)

@bot.command()
async def leave(ctx):
    if ctx.voice_client:
        await ctx.voice_client.disconnect()
    await ctx.reply("üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß", mention_author=False)

@bot.command()
async def play(ctx, *, query: str):
    p = await ensure_connected(ctx)
    # URL = search ‡∏ï‡∏£‡∏á, ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° = ‡∏Ñ‡πâ‡∏ô YouTube
    if query.startswith(("http://", "https://")):
        tracks = await wavelink.Playable.search(query)
    else:
        tracks = await wavelink.YouTubeTrack.search(query=query, return_first=False)

    if not tracks:
        return await ctx.reply("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÄ‡∏û‡∏•‡∏á", mention_author=False)

    t = tracks[0]
    if p.playing:
        p.queue.put(t)
        return await ctx.reply(f"‚ûï ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß: **{t.title}**", mention_author=False)

    await p.play(t)
    await ctx.reply(f"üé∂ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô: **{t.title}**", mention_author=False)

@bot.listen("on_wavelink_track_end")
async def _on_end(payload: wavelink.TrackEndEventPayload):
    p: wavelink.Player = payload.player
    if not p.queue.is_empty:
        nxt = p.queue.get()
        await p.play(nxt)
        if getattr(p, "text_channel", None):
            await p.text_channel.send(f"üéµ ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠: **{nxt.title}**")

@bot.command()
async def pause(ctx):
    p: wavelink.Player = ctx.voice_client
    if not p or not p.playing:
        return await ctx.reply("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô", mention_author=False)
    await p.pause()
    await ctx.reply("‚è∏Ô∏è ‡∏û‡∏±‡∏Å‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß", mention_author=False)

@bot.command()
async def resume(ctx):
    p: wavelink.Player = ctx.voice_client
    if not p:
        return await ctx.reply("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á", mention_author=False)
    await p.resume()
    await ctx.reply("‚ñ∂Ô∏è ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß", mention_author=False)

@bot.command()
async def skip(ctx):
    p: wavelink.Player = ctx.voice_client
    if not p or not p.playing:
        return await ctx.reply("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°", mention_author=False)
    await p.stop()
    await ctx.reply("‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á", mention_author=False)

@bot.command()
async def stop(ctx):
    p: wavelink.Player = ctx.voice_client
    if not p:
        return await ctx.reply("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á", mention_author=False)
    p.queue.clear()
    await p.stop()
    await ctx.reply("üõë ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß", mention_author=False)

@bot.command(name="np")
async def now_playing(ctx):
    p: wavelink.Player = ctx.voice_client
    if not p or not p.current:
        return await ctx.reply("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô", mention_author=False)
    await ctx.reply(f"üéß ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: **{p.current.title}**", mention_author=False)

@bot.command()
async def queue(ctx):
    p: wavelink.Player = ctx.voice_client
    if not p or p.queue.is_empty:
        return await ctx.reply("üì≠ ‡∏Ñ‡∏¥‡∏ß‡∏ß‡πà‡∏≤‡∏á", mention_author=False)
    items = list(p.queue)
    lines = [f"{i+1}. {t.title}" for i, t in enumerate(items[:10])]
    more = f"\n...‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(items)-10} ‡πÄ‡∏û‡∏•‡∏á" if len(items) > 10 else ""
    await ctx.reply("üìú **‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á:**\n" + "\n".join(lines) + more, mention_author=False)



# ====== VOLUME ======
@bot.command(aliases=["vol"])
async def volume(ctx, level: int):
    """‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á 0‚Äì150"""
    p: wavelink.Player = ctx.voice_client
    if not p:
        return await ctx.reply("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á", mention_author=False)
    level = max(0, min(150, level))
    await p.set_volume(level)
    await ctx.reply(f"üîä ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á = {level}", mention_author=False)

@bot.command()
async def vup(ctx, step: int = 10):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡∏•‡∏∞ step (‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå 10)"""
    p: wavelink.Player = ctx.voice_client
    if not p:
        return await ctx.reply("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á", mention_author=False)
    cur = getattr(p, "volume", 100) or 100
    new = max(0, min(150, cur + step))
    await p.set_volume(new)
    await ctx.reply(f"üîä ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô {new}", mention_author=False)

@bot.command()
async def vdown(ctx, step: int = 10):
    """‡∏•‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡∏•‡∏∞ step (‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå 10)"""
    p: wavelink.Player = ctx.voice_client
    if not p:
        return await ctx.reply("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á", mention_author=False)
    cur = getattr(p, "volume", 100) or 100
    new = max(0, min(150, cur - step))
    await p.set_volume(new)
    await ctx.reply(f"üîâ ‡∏•‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô {new}", mention_author=False)

# ====== BASS BOOST (EQ) ‚Äî ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Wavelink 3.3.x ======
# ====== BASS BOOST (EQ) ‚Äî Wavelink 3.3.0 ======
def _eq_preset(level: str) -> wavelink.Equalizer:
    level = level.lower()
    presets = {
        "off":    [],
        "light":  [(0, .15), (1, .10), (2, .05)],
        "medium": [(0, .25), (1, .20), (2, .15), (3, .10)],
        "hard":   [(0, .35), (1, .30), (2, .25), (3, .20), (4, .10)],
        "extreme":[(0, .50), (1, .45), (2, .40), (3, .30), (4, .20), (5, .10)],
    }
    bands = presets.get(level)
    if bands is None:
        raise ValueError("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ: off, light, medium, hard, extreme")

    # ‚úÖ 3.3.0: ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå bands ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ß‡πÄ‡∏°‡∏ô‡∏ï‡πå ‚Äú‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‚Äù ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    return wavelink.Equalizer(bands)

@bot.command()
async def bass(ctx, level: str):
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏™: off | light | medium | hard | extreme"""
    p: wavelink.Player = ctx.voice_client
    if not p:
        return await ctx.reply("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á", mention_author=False)
    try:
        eq = _eq_preset(level)
    except ValueError as e:
        return await ctx.reply(f"‚ö†Ô∏è {e}", mention_author=False)

    await p.set_filters(wavelink.Filters(equalizer=eq))
    await ctx.reply(f"üéöÔ∏è Bass boost: **{level.lower()}**", mention_author=False)


# ====== TIMESCALE (Wavelink 3.3.0 ‡πÉ‡∏ä‡πâ 'rate' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô) ======
@bot.command()
async def speed(ctx, value: float):
    """‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß (0.5‚Äì2.0) ‚Äî ‡πÉ‡∏ä‡πâ timescale.rate"""
    p: wavelink.Player = ctx.voice_client
    if not p:
        return await ctx.reply("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á", mention_author=False)
    value = max(0.5, min(2.0, value))
    ts = wavelink.Timescale(rate=value)   # <-- ‡πÉ‡∏ä‡πâ rate ‡πÅ‡∏ó‡∏ô speed/pitch
    await p.set_filters(wavelink.Filters(timescale=ts))
    await ctx.reply(f"‚è© Speed (rate) = {value:.2f}", mention_author=False)

@bot.command(aliases=["clearfx","fxoff","resetfx"])
async def fxreset(ctx):
    """‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    p: wavelink.Player = ctx.voice_client
    if not p:
        return await ctx.reply("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á", mention_author=False)
    await p.set_filters(wavelink.Filters())  # ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ß‡πà‡∏≤‡∏á
    await ctx.reply("‚ôªÔ∏è ‡∏õ‡∏¥‡∏î‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß", mention_author=False)


# ---------- Error handler ----------
@bot.event
async def on_command_error(ctx, error):
    await ctx.reply(f"‚ö†Ô∏è {error}", mention_author=False)

# ---------- Entry ----------
if __name__ == "__main__":
    if not TOKEN:
        raise SystemExit("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà DISCORD_TOKEN ‡πÉ‡∏ô .env")
    bot.run(TOKEN)
